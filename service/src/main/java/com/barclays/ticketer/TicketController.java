package com.barclays.ticketer;

import java.util.Date;

import com.barclays.ticketer.utils.TicketConstants.Status;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/ticket") // This means URL's start with /demo (after Application path)
@CrossOrigin(origins = "http://localhost:3000")
public class TicketController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private TicketRepository ticketRepository;

	@PostMapping(path = "/create") // Map ONLY POST Requests
	public @ResponseBody String createTicket(@RequestParam String title, @RequestParam Status status,
			@RequestParam String author, @RequestParam String description) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Date dateCreated = new Date(System.currentTimeMillis());

		Ticket ticket = new Ticket();
		ticket.setTitle(title);
		ticket.setStatus(status);
		ticket.setAuthor(author);
		ticket.setDescription(description);
		ticket.setDateCreated(dateCreated);
		ticket.setDateUpdated(dateCreated);
		ticketRepository.save(ticket);

		return "Created successfully";
	}

	@GetMapping(path = "/all")
	public @ResponseBody Iterable<Ticket> getAllTicket() {
		// This returns a JSON or XML with the users
		return ticketRepository.findAll();
	}

	@GetMapping(path = "/{id}")
	public @ResponseBody Ticket getTicket(@PathVariable Integer id) {
		return ticketRepository.findById(id).get();
	}

	@PutMapping(path = "/update")
	public @ResponseBody String updateTicket(@RequestParam Integer id, @RequestParam String title,
			@RequestParam Status status, @RequestParam String author, @RequestParam String description) {
		Date dateUpdated = new Date(System.currentTimeMillis());

		Ticket ticket = ticketRepository.findById(id).get();
		ticket.setTitle(title);
		ticket.setStatus(status);
		ticket.setAuthor(author);
		ticket.setDescription(description);
		ticket.setDateUpdated(dateUpdated);
		ticketRepository.save(ticket);

		return "Updated successfully";
	}

	@DeleteMapping(path = "/delete")
	public @ResponseBody String deleteTicket(@RequestParam Integer id) {
		ticketRepository.deleteById(id);

		return "Deleted successfully";
	}
}
